// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { AuthDatabaseLoginAuthLoginPostData, AuthDatabaseLoginAuthLoginPostResponses, AuthDatabaseLoginAuthLoginPostErrors, AuthDatabaseLogoutAuthLogoutPostData, AuthDatabaseLogoutAuthLogoutPostResponses, AuthDatabaseLogoutAuthLogoutPostErrors, RegisterRegisterAuthRegisterPostData, RegisterRegisterAuthRegisterPostResponses, RegisterRegisterAuthRegisterPostErrors, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetData, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetResponses, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetErrors, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetData, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetResponses, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetErrors, ResetForgotPasswordAuthForgotPasswordPostData, ResetForgotPasswordAuthForgotPasswordPostResponses, ResetForgotPasswordAuthForgotPasswordPostErrors, ResetResetPasswordAuthResetPasswordPostData, ResetResetPasswordAuthResetPasswordPostResponses, ResetResetPasswordAuthResetPasswordPostErrors, VerifyRequestTokenAuthRequestVerifyTokenPostData, VerifyRequestTokenAuthRequestVerifyTokenPostResponses, VerifyRequestTokenAuthRequestVerifyTokenPostErrors, VerifyVerifyAuthVerifyPostData, VerifyVerifyAuthVerifyPostResponses, VerifyVerifyAuthVerifyPostErrors, UsersCurrentUserUsersMeGetData, UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, UsersPatchCurrentUserUsersMePatchData, UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, UsersDeleteUserUsersIdDeleteData, UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, UsersUserUsersIdGetData, UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, UsersPatchUserUsersIdPatchData, UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, ReadRootGetData, ReadRootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, ReadItemItemsItemIdGetData, ReadItemItemsItemIdGetResponses, ReadItemItemsItemIdGetErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Auth:Database.Login
 */
export const authDatabaseLoginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthDatabaseLoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthDatabaseLoginAuthLoginPostResponses, AuthDatabaseLoginAuthLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Auth:Database.Logout
 */
export const authDatabaseLogoutAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<AuthDatabaseLogoutAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthDatabaseLogoutAuthLogoutPostResponses, AuthDatabaseLogoutAuthLogoutPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const registerRegisterAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterRegisterAuthRegisterPostResponses, RegisterRegisterAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Oauth:Google.Database.Authorize
 */
export const oauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGet = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetResponses, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/google/authorize',
        ...options
    });
};

/**
 * Oauth:Google.Database.Callback
 * The response varies based on the authentication backend used.
 */
export const oauthGoogleDatabaseCallbackAuthGoogleCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleDatabaseCallbackAuthGoogleCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthGoogleDatabaseCallbackAuthGoogleCallbackGetResponses, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/google/callback',
        ...options
    });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPasswordAuthForgotPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordAuthForgotPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetForgotPasswordAuthForgotPasswordPostResponses, ResetForgotPasswordAuthForgotPasswordPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset:Reset Password
 */
export const resetResetPasswordAuthResetPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordAuthResetPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetResetPasswordAuthResetPasswordPostResponses, ResetResetPasswordAuthResetPasswordPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestTokenAuthRequestVerifyTokenPost = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenAuthRequestVerifyTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyRequestTokenAuthRequestVerifyTokenPostResponses, VerifyRequestTokenAuthRequestVerifyTokenPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/request-verify-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Verify
 */
export const verifyVerifyAuthVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyAuthVerifyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVerifyAuthVerifyPostResponses, VerifyVerifyAuthVerifyPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserUsersMePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserUsersIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUserUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<UsersUserUsersIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUserUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserUsersIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};

/**
 * Read Item
 */
export const readItemItemsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadItemItemsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadItemItemsItemIdGetResponses, ReadItemItemsItemIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/items/{item_id}',
        ...options
    });
};