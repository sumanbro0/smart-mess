// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-axios';
import type { AuthDatabaseLoginAuthLoginPostData, AuthDatabaseLoginAuthLoginPostResponses, AuthDatabaseLoginAuthLoginPostErrors, AuthDatabaseLogoutAuthLogoutPostData, AuthDatabaseLogoutAuthLogoutPostResponses, AuthDatabaseLogoutAuthLogoutPostErrors, RegisterRegisterAuthRegisterPostData, RegisterRegisterAuthRegisterPostResponses, RegisterRegisterAuthRegisterPostErrors, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetData, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetResponses, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetErrors, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetData, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetResponses, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetErrors, ResetForgotPasswordAuthForgotPasswordPostData, ResetForgotPasswordAuthForgotPasswordPostResponses, ResetForgotPasswordAuthForgotPasswordPostErrors, ResetResetPasswordAuthResetPasswordPostData, ResetResetPasswordAuthResetPasswordPostResponses, ResetResetPasswordAuthResetPasswordPostErrors, VerifyRequestTokenAuthRequestVerifyTokenPostData, VerifyRequestTokenAuthRequestVerifyTokenPostResponses, VerifyRequestTokenAuthRequestVerifyTokenPostErrors, VerifyVerifyAuthVerifyPostData, VerifyVerifyAuthVerifyPostResponses, VerifyVerifyAuthVerifyPostErrors, MyCustomersAuthMyCustomersGetData, MyCustomersAuthMyCustomersGetResponses, UploadFileFilesUploadPostData, UploadFileFilesUploadPostResponses, UploadFileFilesUploadPostErrors, UploadMultipleFilesFilesUploadMultiplePostData, UploadMultipleFilesFilesUploadMultiplePostResponses, UploadMultipleFilesFilesUploadMultiplePostErrors, DeleteFileFilesCategoryFilenameDeleteData, DeleteFileFilesCategoryFilenameDeleteResponses, DeleteFileFilesCategoryFilenameDeleteErrors, GetFileFilesCategoryFilenameGetData, GetFileFilesCategoryFilenameGetResponses, GetFileFilesCategoryFilenameGetErrors, GetUploadInfoFilesInfoGetData, GetUploadInfoFilesInfoGetResponses, UsersCurrentUserUsersMeGetData, UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, UsersPatchCurrentUserUsersMePatchData, UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, UsersDeleteUserUsersIdDeleteData, UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, UsersUserUsersIdGetData, UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, UsersPatchUserUsersIdPatchData, UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, GetMessesMessGetData, GetMessesMessGetResponses, GetMessesMessGetErrors, CreateMessMessPostData, CreateMessMessPostResponses, CreateMessMessPostErrors, GetMessBySlugMessSlugGetData, GetMessBySlugMessSlugGetResponses, GetMessBySlugMessSlugGetErrors, WhoamiMessSlugWhoamiGetData, WhoamiMessSlugWhoamiGetResponses, WhoamiMessSlugWhoamiGetErrors, DeleteMessMessMessIdDeleteData, DeleteMessMessMessIdDeleteResponses, DeleteMessMessMessIdDeleteErrors, GetMessMessMessIdGetData, GetMessMessMessIdGetResponses, GetMessMessMessIdGetErrors, UpdateMessMessMessIdPutData, UpdateMessMessMessIdPutResponses, UpdateMessMessMessIdPutErrors, GetMessTablesMessMessSlugTablesGetData, GetMessTablesMessMessSlugTablesGetResponses, GetMessTablesMessMessSlugTablesGetErrors, CreateMessTableMessMessSlugTablesPostData, CreateMessTableMessMessSlugTablesPostResponses, CreateMessTableMessMessSlugTablesPostErrors, DeleteMessTableMessMessSlugTablesTableIdDeleteData, DeleteMessTableMessMessSlugTablesTableIdDeleteResponses, DeleteMessTableMessMessSlugTablesTableIdDeleteErrors, GetMessTableMessMessSlugTablesTableIdGetData, GetMessTableMessMessSlugTablesTableIdGetResponses, GetMessTableMessMessSlugTablesTableIdGetErrors, UpdateMessTableMessMessSlugTablesTableIdPutData, UpdateMessTableMessMessSlugTablesTableIdPutResponses, UpdateMessTableMessMessSlugTablesTableIdPutErrors, CreateMenuMenuPostData, CreateMenuMenuPostResponses, CreateMenuMenuPostErrors, DeleteMenuMenuMenuIdDeleteData, DeleteMenuMenuMenuIdDeleteResponses, DeleteMenuMenuMenuIdDeleteErrors, GetMenuMenuMenuIdGetData, GetMenuMenuMenuIdGetResponses, GetMenuMenuMenuIdGetErrors, UpdateMenuMenuMenuIdPutData, UpdateMenuMenuMenuIdPutResponses, UpdateMenuMenuMenuIdPutErrors, CreateCategoryMenuCategoryPostData, CreateCategoryMenuCategoryPostResponses, CreateCategoryMenuCategoryPostErrors, DeleteCategoryMenuCategoryCategoryIdDeleteData, DeleteCategoryMenuCategoryCategoryIdDeleteResponses, DeleteCategoryMenuCategoryCategoryIdDeleteErrors, GetCategoryMenuCategoryCategoryIdGetData, GetCategoryMenuCategoryCategoryIdGetResponses, GetCategoryMenuCategoryCategoryIdGetErrors, UpdateCategoryMenuCategoryCategoryIdPutData, UpdateCategoryMenuCategoryCategoryIdPutResponses, UpdateCategoryMenuCategoryCategoryIdPutErrors, CreateMenuItemMenuItemPostData, CreateMenuItemMenuItemPostResponses, CreateMenuItemMenuItemPostErrors, DeleteMenuItemMenuItemItemIdDeleteData, DeleteMenuItemMenuItemItemIdDeleteResponses, DeleteMenuItemMenuItemItemIdDeleteErrors, GetMenuItemMenuItemItemIdGetData, GetMenuItemMenuItemItemIdGetResponses, GetMenuItemMenuItemItemIdGetErrors, UpdateMenuItemMenuItemItemIdPutData, UpdateMenuItemMenuItemItemIdPutResponses, UpdateMenuItemMenuItemItemIdPutErrors, AddMenuItemImageMenuItemItemIdImagePostData, AddMenuItemImageMenuItemItemIdImagePostResponses, AddMenuItemImageMenuItemItemIdImagePostErrors, DeleteMenuItemImageMenuItemImageImageIdDeleteData, DeleteMenuItemImageMenuItemImageImageIdDeleteResponses, DeleteMenuItemImageMenuItemImageImageIdDeleteErrors, CreateOrderOrdersPostData, CreateOrderOrdersPostResponses, CreateOrderOrdersPostErrors, DeleteOrderOrdersOrderIdDeleteData, DeleteOrderOrdersOrderIdDeleteResponses, DeleteOrderOrdersOrderIdDeleteErrors, GetOrderOrdersOrderIdGetData, GetOrderOrdersOrderIdGetResponses, GetOrderOrdersOrderIdGetErrors, UpdateOrderOrdersOrderIdPutData, UpdateOrderOrdersOrderIdPutResponses, UpdateOrderOrdersOrderIdPutErrors, AddOrderItemOrdersOrderIdItemsPostData, AddOrderItemOrdersOrderIdItemsPostResponses, AddOrderItemOrdersOrderIdItemsPostErrors, DeleteOrderItemOrdersItemsItemIdDeleteData, DeleteOrderItemOrdersItemsItemIdDeleteResponses, DeleteOrderItemOrdersItemsItemIdDeleteErrors, UpdateOrderItemOrdersItemsItemIdPutData, UpdateOrderItemOrdersItemsItemIdPutResponses, UpdateOrderItemOrdersItemsItemIdPutErrors, CreateOrderTransactionOrdersOrderIdTransactionsPostData, CreateOrderTransactionOrdersOrderIdTransactionsPostResponses, CreateOrderTransactionOrdersOrderIdTransactionsPostErrors, GetOrderTransactionOrdersTransactionsTransactionIdGetData, GetOrderTransactionOrdersTransactionsTransactionIdGetResponses, GetOrderTransactionOrdersTransactionsTransactionIdGetErrors, UpdateOrderTransactionOrdersTransactionsTransactionIdPutData, UpdateOrderTransactionOrdersTransactionsTransactionIdPutResponses, UpdateOrderTransactionOrdersTransactionsTransactionIdPutErrors, ReadRootGetData, ReadRootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, ReadItemItemsItemIdGetData, ReadItemItemsItemIdGetResponses, ReadItemItemsItemIdGetErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Auth:Database.Login
 */
export const authDatabaseLoginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthDatabaseLoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthDatabaseLoginAuthLoginPostResponses, AuthDatabaseLoginAuthLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Auth:Database.Logout
 */
export const authDatabaseLogoutAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<AuthDatabaseLogoutAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthDatabaseLogoutAuthLogoutPostResponses, AuthDatabaseLogoutAuthLogoutPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout',
        ...options
    });
};

/**
 * Register:Register
 */
export const registerRegisterAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterRegisterAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterRegisterAuthRegisterPostResponses, RegisterRegisterAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Oauth:Google.Database.Authorize
 */
export const oauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGet = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetResponses, OauthGoogleDatabaseAuthorizeAuthGoogleAuthorizeGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/google/authorize',
        ...options
    });
};

/**
 * Oauth:Google.Database.Callback
 * The response varies based on the authentication backend used.
 */
export const oauthGoogleDatabaseCallbackAuthGoogleCallbackGet = <ThrowOnError extends boolean = false>(options?: Options<OauthGoogleDatabaseCallbackAuthGoogleCallbackGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OauthGoogleDatabaseCallbackAuthGoogleCallbackGetResponses, OauthGoogleDatabaseCallbackAuthGoogleCallbackGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/google/callback',
        ...options
    });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPasswordAuthForgotPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetForgotPasswordAuthForgotPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetForgotPasswordAuthForgotPasswordPostResponses, ResetForgotPasswordAuthForgotPasswordPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset:Reset Password
 */
export const resetResetPasswordAuthResetPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetResetPasswordAuthResetPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetResetPasswordAuthResetPasswordPostResponses, ResetResetPasswordAuthResetPasswordPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestTokenAuthRequestVerifyTokenPost = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenAuthRequestVerifyTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyRequestTokenAuthRequestVerifyTokenPostResponses, VerifyRequestTokenAuthRequestVerifyTokenPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/request-verify-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify:Verify
 */
export const verifyVerifyAuthVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyAuthVerifyPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyVerifyAuthVerifyPostResponses, VerifyVerifyAuthVerifyPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * My Customers
 */
export const myCustomersAuthMyCustomersGet = <ThrowOnError extends boolean = false>(options?: Options<MyCustomersAuthMyCustomersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MyCustomersAuthMyCustomersGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/my-customers',
        ...options
    });
};

/**
 * Upload File
 * Upload a single media file
 */
export const uploadFileFilesUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileFilesUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileFilesUploadPostResponses, UploadFileFilesUploadPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/files/upload/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload Multiple Files
 * Upload multiple media files
 */
export const uploadMultipleFilesFilesUploadMultiplePost = <ThrowOnError extends boolean = false>(options: Options<UploadMultipleFilesFilesUploadMultiplePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadMultipleFilesFilesUploadMultiplePostResponses, UploadMultipleFilesFilesUploadMultiplePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/files/upload/multiple/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete File
 * Delete uploaded file
 */
export const deleteFileFilesCategoryFilenameDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileFilesCategoryFilenameDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileFilesCategoryFilenameDeleteResponses, DeleteFileFilesCategoryFilenameDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/files/{category}/{filename}',
        ...options
    });
};

/**
 * Get File
 * Serve uploaded files
 */
export const getFileFilesCategoryFilenameGet = <ThrowOnError extends boolean = false>(options: Options<GetFileFilesCategoryFilenameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileFilesCategoryFilenameGetResponses, GetFileFilesCategoryFilenameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/files/{category}/{filename}',
        ...options
    });
};

/**
 * Get Upload Info
 * Get upload configuration info
 */
export const getUploadInfoFilesInfoGet = <ThrowOnError extends boolean = false>(options?: Options<GetUploadInfoFilesInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUploadInfoFilesInfoGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/files/info',
        ...options
    });
};

/**
 * Users:Current User
 */
export const usersCurrentUserUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<UsersCurrentUserUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersCurrentUserUsersMeGetResponses, UsersCurrentUserUsersMeGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserUsersMePatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserUsersMePatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchCurrentUserUsersMePatchResponses, UsersPatchCurrentUserUsersMePatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Users:Delete User
 */
export const usersDeleteUserUsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserUsersIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteUserUsersIdDeleteResponses, UsersDeleteUserUsersIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:User
 */
export const usersUserUsersIdGet = <ThrowOnError extends boolean = false>(options: Options<UsersUserUsersIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersUserUsersIdGetResponses, UsersUserUsersIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options
    });
};

/**
 * Users:Patch User
 */
export const usersPatchUserUsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserUsersIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPatchUserUsersIdPatchResponses, UsersPatchUserUsersIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Messes
 * Get all messes for current user
 */
export const getMessesMessGet = <ThrowOnError extends boolean = false>(options?: Options<GetMessesMessGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMessesMessGetResponses, GetMessesMessGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/',
        ...options
    });
};

/**
 * Create Mess
 * Create new mess
 */
export const createMessMessPost = <ThrowOnError extends boolean = false>(options: Options<CreateMessMessPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessMessPostResponses, CreateMessMessPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Mess By Slug
 * Get mess by slug
 */
export const getMessBySlugMessSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetMessBySlugMessSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessBySlugMessSlugGetResponses, GetMessBySlugMessSlugGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{slug}',
        ...options
    });
};

/**
 * Whoami
 */
export const whoamiMessSlugWhoamiGet = <ThrowOnError extends boolean = false>(options: Options<WhoamiMessSlugWhoamiGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WhoamiMessSlugWhoamiGetResponses, WhoamiMessSlugWhoamiGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{slug}/whoami',
        ...options
    });
};

/**
 * Delete Mess
 * Delete mess
 */
export const deleteMessMessMessIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMessMessMessIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessMessMessIdDeleteResponses, DeleteMessMessMessIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_id}',
        ...options
    });
};

/**
 * Get Mess
 * Get specific mess
 */
export const getMessMessMessIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMessMessMessIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessMessMessIdGetResponses, GetMessMessMessIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_id}',
        ...options
    });
};

/**
 * Update Mess
 * Update mess
 */
export const updateMessMessMessIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMessMessMessIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMessMessMessIdPutResponses, UpdateMessMessMessIdPutErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Mess Tables
 * Get all tables for a specific mess
 */
export const getMessTablesMessMessSlugTablesGet = <ThrowOnError extends boolean = false>(options: Options<GetMessTablesMessMessSlugTablesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessTablesMessMessSlugTablesGetResponses, GetMessTablesMessMessSlugTablesGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_slug}/tables/',
        ...options
    });
};

/**
 * Create Mess Table
 * Create new table
 */
export const createMessTableMessMessSlugTablesPost = <ThrowOnError extends boolean = false>(options: Options<CreateMessTableMessMessSlugTablesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessTableMessMessSlugTablesPostResponses, CreateMessTableMessMessSlugTablesPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_slug}/tables/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Mess Table
 * Delete table
 */
export const deleteMessTableMessMessSlugTablesTableIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMessTableMessMessSlugTablesTableIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessTableMessMessSlugTablesTableIdDeleteResponses, DeleteMessTableMessMessSlugTablesTableIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_slug}/tables/{table_id}',
        ...options
    });
};

/**
 * Get Mess Table
 * Get specific table
 */
export const getMessTableMessMessSlugTablesTableIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMessTableMessMessSlugTablesTableIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessTableMessMessSlugTablesTableIdGetResponses, GetMessTableMessMessSlugTablesTableIdGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_slug}/tables/{table_id}',
        ...options
    });
};

/**
 * Update Mess Table
 * Update table
 */
export const updateMessTableMessMessSlugTablesTableIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMessTableMessMessSlugTablesTableIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMessTableMessMessSlugTablesTableIdPutResponses, UpdateMessTableMessMessSlugTablesTableIdPutErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mess/{mess_slug}/tables/{table_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Menu
 */
export const createMenuMenuPost = <ThrowOnError extends boolean = false>(options: Options<CreateMenuMenuPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMenuMenuPostResponses, CreateMenuMenuPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Menu
 */
export const deleteMenuMenuMenuIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMenuMenuMenuIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMenuMenuMenuIdDeleteResponses, DeleteMenuMenuMenuIdDeleteErrors, ThrowOnError>({
        url: '/menu/{menu_id}',
        ...options
    });
};

/**
 * Get Menu
 */
export const getMenuMenuMenuIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMenuMenuMenuIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMenuMenuMenuIdGetResponses, GetMenuMenuMenuIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/{menu_id}',
        ...options
    });
};

/**
 * Update Menu
 */
export const updateMenuMenuMenuIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMenuMenuMenuIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMenuMenuMenuIdPutResponses, UpdateMenuMenuMenuIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/{menu_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Category
 */
export const createCategoryMenuCategoryPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryMenuCategoryPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCategoryMenuCategoryPostResponses, CreateCategoryMenuCategoryPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Category
 */
export const deleteCategoryMenuCategoryCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryMenuCategoryCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCategoryMenuCategoryCategoryIdDeleteResponses, DeleteCategoryMenuCategoryCategoryIdDeleteErrors, ThrowOnError>({
        url: '/menu/category/{category_id}',
        ...options
    });
};

/**
 * Get Category
 */
export const getCategoryMenuCategoryCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCategoryMenuCategoryCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoryMenuCategoryCategoryIdGetResponses, GetCategoryMenuCategoryCategoryIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/category/{category_id}',
        ...options
    });
};

/**
 * Update Category
 */
export const updateCategoryMenuCategoryCategoryIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryMenuCategoryCategoryIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCategoryMenuCategoryCategoryIdPutResponses, UpdateCategoryMenuCategoryCategoryIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/category/{category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Menu Item
 */
export const createMenuItemMenuItemPost = <ThrowOnError extends boolean = false>(options: Options<CreateMenuItemMenuItemPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMenuItemMenuItemPostResponses, CreateMenuItemMenuItemPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Menu Item
 */
export const deleteMenuItemMenuItemItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMenuItemMenuItemItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMenuItemMenuItemItemIdDeleteResponses, DeleteMenuItemMenuItemItemIdDeleteErrors, ThrowOnError>({
        url: '/menu/item/{item_id}',
        ...options
    });
};

/**
 * Get Menu Item
 */
export const getMenuItemMenuItemItemIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMenuItemMenuItemItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMenuItemMenuItemItemIdGetResponses, GetMenuItemMenuItemItemIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/item/{item_id}',
        ...options
    });
};

/**
 * Update Menu Item
 */
export const updateMenuItemMenuItemItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMenuItemMenuItemItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMenuItemMenuItemItemIdPutResponses, UpdateMenuItemMenuItemItemIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/menu/item/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Menu Item Image
 */
export const addMenuItemImageMenuItemItemIdImagePost = <ThrowOnError extends boolean = false>(options: Options<AddMenuItemImageMenuItemItemIdImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMenuItemImageMenuItemItemIdImagePostResponses, AddMenuItemImageMenuItemItemIdImagePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/menu/item/{item_id}/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Menu Item Image
 */
export const deleteMenuItemImageMenuItemImageImageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMenuItemImageMenuItemImageImageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMenuItemImageMenuItemImageImageIdDeleteResponses, DeleteMenuItemImageMenuItemImageImageIdDeleteErrors, ThrowOnError>({
        url: '/menu/item/image/{image_id}',
        ...options
    });
};

/**
 * Create Order
 */
export const createOrderOrdersPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrderOrdersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrderOrdersPostResponses, CreateOrderOrdersPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Order
 */
export const deleteOrderOrdersOrderIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOrderOrdersOrderIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrderOrdersOrderIdDeleteResponses, DeleteOrderOrdersOrderIdDeleteErrors, ThrowOnError>({
        url: '/orders/{order_id}',
        ...options
    });
};

/**
 * Get Order
 */
export const getOrderOrdersOrderIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOrderOrdersOrderIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderOrdersOrderIdGetResponses, GetOrderOrdersOrderIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/{order_id}',
        ...options
    });
};

/**
 * Update Order
 */
export const updateOrderOrdersOrderIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOrderOrdersOrderIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrderOrdersOrderIdPutResponses, UpdateOrderOrdersOrderIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/{order_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add Order Item
 */
export const addOrderItemOrdersOrderIdItemsPost = <ThrowOnError extends boolean = false>(options: Options<AddOrderItemOrdersOrderIdItemsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddOrderItemOrdersOrderIdItemsPostResponses, AddOrderItemOrdersOrderIdItemsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/{order_id}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Order Item
 */
export const deleteOrderItemOrdersItemsItemIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOrderItemOrdersItemsItemIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrderItemOrdersItemsItemIdDeleteResponses, DeleteOrderItemOrdersItemsItemIdDeleteErrors, ThrowOnError>({
        url: '/orders/items/{item_id}',
        ...options
    });
};

/**
 * Update Order Item
 */
export const updateOrderItemOrdersItemsItemIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOrderItemOrdersItemsItemIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrderItemOrdersItemsItemIdPutResponses, UpdateOrderItemOrdersItemsItemIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/items/{item_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Order Transaction
 */
export const createOrderTransactionOrdersOrderIdTransactionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrderTransactionOrdersOrderIdTransactionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrderTransactionOrdersOrderIdTransactionsPostResponses, CreateOrderTransactionOrdersOrderIdTransactionsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/{order_id}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Order Transaction
 */
export const getOrderTransactionOrdersTransactionsTransactionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOrderTransactionOrdersTransactionsTransactionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrderTransactionOrdersTransactionsTransactionIdGetResponses, GetOrderTransactionOrdersTransactionsTransactionIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/transactions/{transaction_id}',
        ...options
    });
};

/**
 * Update Order Transaction
 */
export const updateOrderTransactionOrdersTransactionsTransactionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOrderTransactionOrdersTransactionsTransactionIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOrderTransactionOrdersTransactionsTransactionIdPutResponses, UpdateOrderTransactionOrdersTransactionsTransactionIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/orders/transactions/{transaction_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};

/**
 * Read Item
 */
export const readItemItemsItemIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadItemItemsItemIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadItemItemsItemIdGetResponses, ReadItemItemsItemIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/items/{item_id}',
        ...options
    });
};